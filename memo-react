===============================================================
クラスコンポーネントと関数コンポーネントの違い
===============================================================

React Hooks API が使われるようになる以前は、
関数コンポーネントでは状態が持てなかったので、状態を持つコンポーネントはクラスコンポーネントで実装するというような形になっていました。

関数コンポーネントが状態を持てるようになった今、クラスコンポーネントで定義をする理由があまりなく、新しいコンポーネントを関数コンポーネントで実装するようになってきています。

●クラスコンポーネント

ベース             : クラス	
ステート管理        : インスタンス変数(state) + インスタンスメソッド (setState)
ライフサイクルフック : 各種ライフサイクルメソッドを使って実装	

ex ) 

class TodoList extends React.Component {
  constructor(props) {
    super(props);
    // コンストラクタ
    // ステートの初期化を行う
  }

  componentDidMount() {
    // コンポーネントがマウントされる時に実行する処理を書く
    // ex. Web APIからデータを取得してくるなど
  }

  comopnentShouldUpdate(prevProps, prevState) {
    // propsやステートを比較して、再レンダリング必要な場合はtrueを返す
    return true
  }

  componentDidUpdate(prevProps, prevState) {
    // 画面の更新が行われた後に実行する処理を書く
    // NOTE: ここで無条件にsetStateをすると無限注意するので注意
  }

  componentWillUnmount() {
    // コンポーネントが消去される際の処理を書く
    // ex. イベントリスナーの削除など
  }

  render() {
    // 最初のレンダリング以降setStateが実行された後などステートが書き換わるタイミングで
    // 再実行される。
    return <></> // 任意のコンポーネントをレンダリング
  }



●関数コンポーネント

ベース             : 関数	
ステート管理        : useState を用いたステートフック
ライフサイクルフック : useEffect を使って実装	

ex ) 

const TodoList = () => {
  const [value, setValue] = useState('');

  useEffect(() => {
    // 初回レンダリング時に実行する処理を書く
    // comopnentDidMount相当

    return () => {
      // コンポーネントが削除される時に実行する処理を書く
      // componentWillUnmount相当
    };
  }, []);

  useEffect(() => {
    // valueが変化した時に行う処理を書く
    // componentDidUpdate相当
  }, [value]);

  // stateが変更された時に再度実行される
  // render相当
  return <></>;
};


===============================================================
他のファイルからデータを読み込めるように設定する
===============================================================

export　からコードを記載する
下記を別ファイルで使用する際は、使いたいファイルでimportさせることで、その関数が使えるようになる

export const initFields = (fieldSize) => {
    const fields = []
    for(let i =0; i<fieldSize; i++){
        const cols = new Array(fieldSize).fill('')
        fields.push(cols)
    }

    return fields
}


他にデータを渡したい場合は、
関数・クラス を作成した後にexport

import React from 'react';

const Button = () => {
    return(
        <div className="button">
            <button>start</button>
        </div>
    )
}

export default Button;

===============================================================
状態とは？
===============================================================
例えば、出荷されて販売されるりんごを考えると、りんごには

収穫される前の未熟なりんご
熟れたが、未収穫のりんご
収穫されたりんご
出荷されたりんご
店頭に並んで販売されたりんご
というように同じりんごでも様々な状態をもっていることがわかります。

収穫される前でも、収穫された後でも店頭に並んだあとでも同じりんごですが、時間の経過とともに状態をもつようになっていきます。

let apple = {
  name: 'apple',
  status: 'unripped', // りんごが木の果実として成った状態。最初の状態。
};

const rip = (apple) => {
  // りんごが熟れる
  apple.status = 'ripped';
};

const harvest = (apple) => {
  // りんごを収穫する
  apple.status = 'harvested';
};

const ship = (apple) => {
  // りんごを出荷する
  apple.status = 'shipped';
};

const sale = (apple) => {
  // りんごを販売する
  apple.status = 'onsale';
};

rip(apple);
console.log(apple.status);

harvest(apple);
console.log(apple.status);

ship(apple);
console.log(apple.status);

sale(apple);
console.log(apple.status);

変数や定数といったものはデータであり状態です。

「React を扱う上で状態というものがどういうものなのか？」というのを知っておくことは非常に意義がある

===============================================================
State と Props の違い
===============================================================

React では主に State(ステート)と Props(プロップス)を状態として扱う

自分自身の状態が State
親から渡ってくる状態が Props

コンポーネントの例

const TextField = (props /* props ・・・ 親からわかってくる状態 */) => {
  const [value, setValue] = useState(''); // state・・・コンポーネント自身で保持する状態

  const onChange = (e) => setValue(e.target.value);
  return (
    <input
      type="text"
      value={value}
      onChange={onChange}
      placeholder={props.placeholder}
    />
  );
};

関数コンポーネントの引数部分でわたってくる状態を props
コンポーネント内で保持する状態を state



===============================================================
レンダリングの仕組み
===============================================================

const AppleStatus = ({ status }) => {
  return <h1>{status}</h1>;
};

説明のためにシンプルなコンポーネントにしていますが、これらをよく見るとstatusという状態を元にビュー（Web ページ）を表現していることになります。

このAppleStatusコンポーネントはもしりんごが未熟の状態であれば、引数からunrippedという状態を表す文字列を受け取り、画面にunrippedというりんごの状態を表示します。

ここでもし、先の例のようにりんごが熟した場合りんごの状態は rippedになり、先に表示しておいたunrippedという情報は古くなってしまうので、また新たに状態を渡して新しいビューを作る必要があります。

このときに行われるのが React でよく聞く再レンダリング（再描画）という仕組みで、rippedという新しい状態をもとにビューを構築していきます。

この状態遷移とレンダリングの関係から React ではレンダリングが走るタイミングが決まっていて、そのタイミングは、

props が変更された場合
state が変更された場合      のどちらかになります。

React におけるステートの更新方法は二種類
- 状態を元にビューを表現している
- state か props に変更が入ったタイミングでレンダリング（画面更新）が走る

===============================================================
状態（ステート）の更新方法
===============================================================

React におけるステートの更新方法は二種類あります。

(Hooks API) useState を使って得たステートのための更新関数を使う方法
(従来の方法) クラスコンポーネントで setState を使ったステートの更新方法

Hooks API

const Couter = () => {
  const [count, setCount] = useState(0); // stateを宣言
  const increment = () => setCount(count + 1); // incrementボタンが押された時の関数。setCountを使ってステートを更新
  return (
    <div>
      <h1> count: {count}</h1>
      <button onClick={increment}>increment</button>
    </div>
  );
};

===============================================================
props の状態を更新する方法（子から親コンポーネントの状態の更新)
===============================================================

React では、これまで説明したようにステートの変更の方法が制限されているのですが、実装の中で親コンポーネントのステート（props)を更新したい場合は、

setStateか更新フックを含んだ関数を子の関数に渡す

という形で実装します。

const Todo = () => {
  const [value, setValue] = useState('');
  const [todos, setTodos] = useState([]);

  const onChangeText = (e) => setValue(e.target.value);
  const add = () => {
    setTodos([...todos, value]);
    setValue('');
  };
  const remove = (targetIndex) => {
    // XXX: Todoの配列から要素を削除する関数を宣言
    setTodos(todos.filter((_item, index) => index !== targetIndex));
  };
  return (
    <div>
      <div>
        <input type="text" value={value} onChange={onChangeText} />
        <button onClick={add}>submit</button>
      </div>
      <TodoList todos={todos} onRemove={remove} />
    </div>
  );
};

const TodoList = ({ todos, onRemove }) => {
  return (
    <ul>
      {todos.map((item, index) => {
        const _onRemove = () => onRemove(index); // XXX: onRemoveを使ってTodoのリストを更新
        return (
          <li key={item} onRemove={_onRemove}>
            {item}
          </li>
        );
      })}
    </ul>
  );
};


<TodoList todos={todos} onRemove={remove} />


===============================================================
useStateの使い方
===============================================================

const [状態名(ex. count), 更新関数名(ex. setCount)] = useState(初期値(ex. 0))

フック関数は React の関数のトップレベルで宣言を行うようにしてください。

トップレベルとは、if 文やループ文を含まない関数直下の領域になるので、フックをループや条件分岐内、あるいはネストされた関数内で呼び出してはいけません。

【NG 例 1】React 関数の外で使用している

import React, { useState } from 'react';
import Navigation from './components/Navigation'
import Field from './components/Field'
import Button from './components/Button'
import ManipulationPanel from './components/ManipulationPanel'
import { initFields } from './utils'

  const fields = initFields(35)
  const initialValues = initFields(35)

  const [fields, setFields] = useState(initialValues)

function App() {
  return (
    <div className="App">
      <header className="header">


【NG 例 2】 ループや条件文の中で使用している

import React, { useState } from 'react';
import Navigation from './components/Navigation'
import Field from './components/Field'
import Button from './components/Button'
import ManipulationPanel from './components/ManipulationPanel'
import { initFields } from './utils'

  const fields = initFields(35)
  const initialValues = initFields(35)

function App() {
   if(!fields) {
     const [fields, setFields] = useState(initialValues)
   }
   return (
     <div className="App">
       <header className="header">

===============================================================
useEffectの使い方
===============================================================

useEffect(レンダリング後に実行される関数（コールバック）, 依存変数の配列)

useEffectのコールバックは基本的に初回のレンダリング時および毎回のレンダリング時に実行されるようになっています。

初回のレンダリングに一度だけ実行したいので、この配列を空にしてあります。
useEffect(() => {
  setPosition(initialPosition);
}, []);

これはクラスコンポーネントにおけるcomponentDidMountと同様の操作になります。

関数コンポーネントを書く時にcomponentDidMount相当の処理を実装する時はこちらのように第二引数を空にしたuseEffectを使うと良い


===============================================================
setIntervalの使い方
===============================================================

setInterval(一定間隔ごとに実行する関数（コールバック）, インターバルの長さ(ms))


===============================================================
useEffect でのイベント登録の話
===============================================================

イベントリスナーは多くの場合一度登録できればよいので、
useEffectを使ってcomponentDidMount的な形で登録したいところです。
ただ今回は中でonChangeDirectionを使用しているので、
これを第二引数で指定してonChangeDirectionが再生成されたらイベント自体も登録しなおす必要があります。


 JavaScript の関数宣言は宣言された自体で新たに関数を生成します。
 普通に関数コンポーネント上に関数を宣言を書いておくと、レンダリングのたびに関数が再生成されることになります。

これが余分な処理になるので、これを防ぐ仕組みがuseCallbackになります。


===============================================================
useMemo
===============================================================

Hooks API には useMemo というコールバックも存在します。

===============================================================
破壊的メソッド
===============================================================
pop（末尾の配列を取り出して削除）
unshift（配列の先頭に要素を追加）

破壊的メソッドというのは、レシーバーを書き換えるような関数の呼び名で下記のような処理を実行すると

// この式だとarrayがレシーバー
array.pop();
array.shift();
array.push(ele);

どの処理でもarray自身の変数を書き換えるようになります。反対にこれらを破壊的変更を加えないよう（イミュータブル）に書き換えると

array[array.length - 1]
array[0]
[...array, ele]

のようになります。

React のステートは 
useState で取得する更新関数以外で更新するとレンダリング時にうまく変更が反映されない場合があるので、
ステートへの破壊的メソッドの適用は注意しなければなりません。


===============================================================
スプレッド演算子
===============================================================

 [...body]

 スプレッド演算子は配列やオブジェクトのデータを展開して扱うことができる構文です。

 ex
 // 配列の場合
hoge = [1, 2, 3];
fuga = [...hoge, 4];

console.log(fuga); // => [1, 2, 3, 4]

// オブジェクトの場合
hoge = { a: 'a', b: 'b' };
fuga = { ...hoge, c: 'c' };

console.log(fuga); // => { a: 'a', b: 'b', c: 'c' }



===============================================================
[条件式] && [任意の処理]
===============================================================

[条件式] && [任意の処理]のように&&で繋ぐと前の条件式がtrueの時だけ後ろの処理が実行されるようになります。

ex
const Button = ({ status, onStart, onStop, onRestart }) => {
    return(
        <div className="button">
            { status === "gameover" && <button onClick={onRestart}>gameover</button> }
            { status === "init" && <button onClick={onStart}>start</button> }
            { status === "suspended" && <button onClick={onStart}>start</button> }
            { status === "playing" && <button onClick={onStop}>stop</button> }
        </div>
    )
}

